{"version":3,"sources":["../src/index.ts","../src/helpers/colorizeText.ts","../src/helpers/getColorCode.ts","../src/helpers/getLogFooter.ts","../src/helpers/getVariantText.ts","../src/helpers/getLogHeader.ts"],"sourcesContent":["import getLogFooter from \"./helpers/getLogFooter\";\r\nimport getLogHeader from \"./helpers/getLogHeader\";\r\nimport { TColors } from \"./types/colors\";\r\nimport { TVariant } from \"./types/text-variant\";\r\n\r\ntype TPayload = {\r\n  content: any;\r\n  variant: TVariant;\r\n  fileName?: string;\r\n  color?: TColors;\r\n  bg?: TColors;\r\n};\r\n\r\nconst fancyConsole = (params: TPayload) => {\r\n  console.log(\r\n    getLogHeader(params.variant, params.fileName),\r\n    \"\\n\\n\",\r\n    params.content,\r\n    getLogFooter()\r\n  );\r\n};\r\n\r\nfancyConsole({\r\n  content: \"Console it here\",\r\n  variant: \"success\",\r\n  fileName: \"TEst File Name\",\r\n});\r\n\r\nexport default fancyConsole;\r\n","import { TAnsiBgColors, TAnsiTxtColors } from \"../types/ansi-colors\";\r\n\r\nconst colorizeText = (\r\n  text: string,\r\n  color: TAnsiTxtColors,\r\n  bg: TAnsiBgColors = 49\r\n) => {\r\n  return `\\x1b[${color};${bg}m${text}\\x1b[0m`;\r\n};\r\n\r\nexport default colorizeText;\r\n","import { TColors } from \"../types/colors\";\r\n\r\nexport const getTextColorCode = (color: TColors) => {\r\n  switch (color) {\r\n    case \"Black\":\r\n      return 30;\r\n    case \"Red\":\r\n      return 31;\r\n    case \"Green\":\r\n      return 32;\r\n    case \"Yellow\":\r\n      return 33;\r\n    case \"Blue\":\r\n      return 34;\r\n    case \"Magenta\":\r\n      return 35;\r\n    case \"Cyan\":\r\n      return 36;\r\n    case \"White\":\r\n      return 37;\r\n    case \"Gray\":\r\n      return 90;\r\n    case \"Bright Red\":\r\n      return 91;\r\n    case \"Bright Green\":\r\n      return 92;\r\n    case \"Bright Yellow\":\r\n      return 93;\r\n    case \"Bright Blue\":\r\n      return 94;\r\n    case \"Bright Magenta\":\r\n      return 95;\r\n    case \"Bright Cyan\":\r\n      return 96;\r\n    case \"Bright White\":\r\n      return 97;\r\n\r\n    default:\r\n      return 94;\r\n  }\r\n};\r\n\r\nexport const getBackgroundColorCode = (color: TColors) => {\r\n  switch (color) {\r\n    case \"Black\":\r\n      return 40;\r\n    case \"Red\":\r\n      return 41;\r\n    case \"Green\":\r\n      return 42;\r\n    case \"Yellow\":\r\n      return 43;\r\n    case \"Blue\":\r\n      return 44;\r\n    case \"Magenta\":\r\n      return 45;\r\n    case \"Cyan\":\r\n      return 46;\r\n    case \"White\":\r\n      return 47;\r\n    case \"Gray\":\r\n      return 100;\r\n    case \"Bright Red\":\r\n      return 101;\r\n    case \"Bright Green\":\r\n      return 102;\r\n    case \"Bright Yellow\":\r\n      return 103;\r\n    case \"Bright Blue\":\r\n      return 104;\r\n    case \"Bright Magenta\":\r\n      return 105;\r\n    case \"Bright Cyan\":\r\n      return 106;\r\n    case \"Bright White\":\r\n      return 107;\r\n\r\n    default:\r\n      return 104;\r\n  }\r\n};\r\n","import colorizeText from \"./colorizeText\";\r\nimport { getTextColorCode } from \"./getColorCode\";\r\n\r\nconst getLogFooter = () => {\r\n  const color = getTextColorCode(\"Bright Blue\");\r\n  const footerFirst = `${colorizeText(\"Made with\", color)}`;\r\n  const footerLast = `${colorizeText(\"by Mehedi Siam\", color)}`;\r\n  return `\\n\\n* \\\\\\\\==================== ${footerFirst} ðŸ’— ${footerLast} ====================// *`;\r\n};\r\nexport default getLogFooter;\r\n","import { TColors } from \"../types/colors\";\r\nimport { TVariant } from \"../types/text-variant\";\r\nimport colorizeText from \"./colorizeText\";\r\nimport { getBackgroundColorCode, getTextColorCode } from \"./getColorCode\";\r\n\r\nconst getVariantDefaultColor = (variant: TVariant) => {\r\n  switch (variant) {\r\n    case \"success\":\r\n      return \"Bright Green\";\r\n    case \"info\":\r\n      return \"Bright Blue\";\r\n    case \"warning\":\r\n      return \"Bright Yellow\";\r\n    case \"error\":\r\n      return \"Bright Red\";\r\n\r\n    default:\r\n      return \"Bright Blue\";\r\n  }\r\n};\r\n\r\nconst getVariantText = (variant: TVariant, color?: TColors) => {\r\n  const defaultColor = getVariantDefaultColor(variant);\r\n  const textColorCode = getTextColorCode(\"Bright White\");\r\n  const bgColorCode = getBackgroundColorCode(color || defaultColor);\r\n\r\n  switch (variant) {\r\n    case \"success\":\r\n      return colorizeText(\" SUCCESS LOG \", textColorCode, bgColorCode);\r\n\r\n    case \"info\":\r\n      return colorizeText(\" INFO LOG \", textColorCode, bgColorCode);\r\n    case \"warning\":\r\n      return colorizeText(\" WARING LOG \", textColorCode, bgColorCode);\r\n    case \"error\":\r\n      return colorizeText(\" ERROR LOG \", textColorCode, bgColorCode);\r\n\r\n    default:\r\n      return colorizeText(\" INFO LOG \", textColorCode, bgColorCode);\r\n  }\r\n};\r\n\r\nexport default getVariantText;\r\n","import { TVariant } from \"../types/text-variant\";\r\nimport colorizeText from \"./colorizeText\";\r\nimport { getBackgroundColorCode, getTextColorCode } from \"./getColorCode\";\r\nimport getVariantText from \"./getVariantText\";\r\n\r\nconst getLogHeader = (variant: TVariant, fileName?: string) => {\r\n  const fileNameColor = getTextColorCode(\"Bright Blue\");\r\n  const bgColor = getBackgroundColorCode(\"Bright White\");\r\n  const file = fileName\r\n    ? `located at ${colorizeText(` ${fileName} `, fileNameColor, bgColor)} `\r\n    : \"\";\r\n  const variantText = getVariantText(variant);\r\n\r\n  return `\\n\\n\\n* //==================== ${variantText} ${file}====================\\\\\\\\ *`;\r\n};\r\nexport default getLogHeader;\r\n"],"mappings":"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","names":[]}