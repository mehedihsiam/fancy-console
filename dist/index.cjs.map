{"version":3,"sources":["../src/index.ts","../src/helpers/colorizeText.ts","../src/helpers/getColorCode.ts","../src/helpers/getLogFooter.ts","../src/helpers/getVariantText.ts","../src/helpers/getLogHeader.ts","../src/methods/success.ts","../src/methods/warning.ts","../src/methods/error.ts","../src/methods/info.ts","../src/methods/base.ts"],"sourcesContent":["import consoleSuccess from \"./methods/success\";\r\nimport consoleWarning from \"./methods/warning\";\r\nimport consoleError from \"./methods/error\";\r\nimport consoleInfo from \"./methods/info\";\r\nimport base from \"./methods/base\";\r\n\r\nexport const success = consoleSuccess;\r\nexport const warning = consoleWarning;\r\nexport const error = consoleError;\r\nexport const info = consoleInfo;\r\n\r\nconst fancyConsole = base;\r\n\r\nexport default fancyConsole;\r\n","import { TAnsiBgColors, TAnsiTxtColors } from \"../types/ansi-colors\";\r\n\r\nconst colorizeText = (\r\n  text: string,\r\n  color: TAnsiTxtColors,\r\n  bg: TAnsiBgColors = 49\r\n) => {\r\n  return `\\x1b[${color};${bg}m${text}\\x1b[0m`;\r\n};\r\n\r\nexport default colorizeText;\r\n","import { TColors } from \"../types/colors\";\r\n\r\nexport const getTextColorCode = (color: TColors) => {\r\n  switch (color) {\r\n    case \"Black\":\r\n      return 30;\r\n    case \"Red\":\r\n      return 31;\r\n    case \"Green\":\r\n      return 32;\r\n    case \"Yellow\":\r\n      return 33;\r\n    case \"Blue\":\r\n      return 34;\r\n    case \"Magenta\":\r\n      return 35;\r\n    case \"Cyan\":\r\n      return 36;\r\n    case \"White\":\r\n      return 37;\r\n    case \"Gray\":\r\n      return 90;\r\n    case \"Bright Red\":\r\n      return 91;\r\n    case \"Bright Green\":\r\n      return 92;\r\n    case \"Bright Yellow\":\r\n      return 93;\r\n    case \"Bright Blue\":\r\n      return 94;\r\n    case \"Bright Magenta\":\r\n      return 95;\r\n    case \"Bright Cyan\":\r\n      return 96;\r\n    case \"Bright White\":\r\n      return 97;\r\n\r\n    default:\r\n      return 94;\r\n  }\r\n};\r\n\r\nexport const getBackgroundColorCode = (color: TColors) => {\r\n  switch (color) {\r\n    case \"Black\":\r\n      return 40;\r\n    case \"Red\":\r\n      return 41;\r\n    case \"Green\":\r\n      return 42;\r\n    case \"Yellow\":\r\n      return 43;\r\n    case \"Blue\":\r\n      return 44;\r\n    case \"Magenta\":\r\n      return 45;\r\n    case \"Cyan\":\r\n      return 46;\r\n    case \"White\":\r\n      return 47;\r\n    case \"Gray\":\r\n      return 100;\r\n    case \"Bright Red\":\r\n      return 101;\r\n    case \"Bright Green\":\r\n      return 102;\r\n    case \"Bright Yellow\":\r\n      return 103;\r\n    case \"Bright Blue\":\r\n      return 104;\r\n    case \"Bright Magenta\":\r\n      return 105;\r\n    case \"Bright Cyan\":\r\n      return 106;\r\n    case \"Bright White\":\r\n      return 107;\r\n\r\n    default:\r\n      return 104;\r\n  }\r\n};\r\n","import colorizeText from \"./colorizeText\";\r\nimport { getTextColorCode } from \"./getColorCode\";\r\n\r\nconst getLogFooter = () => {\r\n  const color = getTextColorCode(\"Bright Blue\");\r\n  const footerFirst = `${colorizeText(\"Made with\", color)}`;\r\n  const footerLast = `${colorizeText(\"by Mehedi Siam\", color)}`;\r\n  return `\\n\\n* \\\\\\\\==================== ${footerFirst} ðŸ’— ${footerLast} ====================// *`;\r\n};\r\nexport default getLogFooter;\r\n","import { TColors } from \"../types/colors\";\r\nimport { TVariant } from \"../types/text-variant\";\r\nimport colorizeText from \"./colorizeText\";\r\nimport { getBackgroundColorCode, getTextColorCode } from \"./getColorCode\";\r\n\r\nconst getVariantDefaultColor = (variant: TVariant) => {\r\n  switch (variant) {\r\n    case \"success\":\r\n      return \"Bright Green\";\r\n    case \"info\":\r\n      return \"Bright Blue\";\r\n    case \"warning\":\r\n      return \"Bright Yellow\";\r\n    case \"error\":\r\n      return \"Bright Red\";\r\n\r\n    default:\r\n      return \"Bright Blue\";\r\n  }\r\n};\r\n\r\nconst getVariantText = (variant: TVariant, color?: TColors, bg?: TColors) => {\r\n  const defaultColor = getVariantDefaultColor(variant);\r\n  const textColorCode = getTextColorCode(color || \"Bright White\");\r\n  const bgColorCode = getBackgroundColorCode(bg || defaultColor);\r\n\r\n  switch (variant) {\r\n    case \"success\":\r\n      return colorizeText(\" SUCCESS LOG \", textColorCode, bgColorCode);\r\n\r\n    case \"info\":\r\n      return colorizeText(\" INFO LOG \", textColorCode, bgColorCode);\r\n    case \"warning\":\r\n      return colorizeText(\" WARING LOG \", textColorCode, bgColorCode);\r\n    case \"error\":\r\n      return colorizeText(\" ERROR LOG \", textColorCode, bgColorCode);\r\n\r\n    default:\r\n      return colorizeText(\" INFO LOG \", textColorCode, bgColorCode);\r\n  }\r\n};\r\n\r\nexport default getVariantText;\r\n","import { TColors } from \"../types/colors\";\r\nimport { TVariant } from \"../types/text-variant\";\r\nimport colorizeText from \"./colorizeText\";\r\nimport { getBackgroundColorCode, getTextColorCode } from \"./getColorCode\";\r\nimport getVariantText from \"./getVariantText\";\r\n\r\ntype TParams = {\r\n  variant: TVariant;\r\n  fileName?: string;\r\n  fileNameColor?: TColors;\r\n  fileNameBg?: TColors;\r\n  identifierColor?: TColors;\r\n  identifierBg?: TColors;\r\n};\r\n\r\nconst getLogHeader = (params: TParams) => {\r\n  const fnColor = getTextColorCode(params.fileNameColor || \"Bright Blue\");\r\n  const bgColor = getBackgroundColorCode(params.fileNameBg || \"Bright White\");\r\n  const file = params.fileName\r\n    ? `located at ${colorizeText(` ${params.fileName} `, fnColor, bgColor)} `\r\n    : \"\";\r\n  const variantText = getVariantText(\r\n    params.variant,\r\n    params.identifierColor,\r\n    params.identifierBg\r\n  );\r\n\r\n  return `\\n\\n\\n* //==================== ${variantText} ${file}====================\\\\\\\\ *`;\r\n};\r\nexport default getLogHeader;\r\n","import getLogFooter from \"../helpers/getLogFooter\";\r\nimport getLogHeader from \"../helpers/getLogHeader\";\r\nimport { TMethodParams } from \"../types/methodParams\";\r\n\r\nconst success = (params: TMethodParams) => {\r\n  const header = getLogHeader({\r\n    variant: \"success\",\r\n    fileName: params.fileName,\r\n    fileNameBg: params.fileNameBg,\r\n    fileNameColor: params.fileNameColor,\r\n    identifierBg: params.identifierBg,\r\n    identifierColor: params.identifierColor,\r\n  });\r\n  const footer = getLogFooter();\r\n\r\n  console.log(header, \"\\n\\n\", params.content, footer);\r\n};\r\n\r\nexport default success;\r\n","import getLogFooter from \"../helpers/getLogFooter\";\r\nimport getLogHeader from \"../helpers/getLogHeader\";\r\nimport { TMethodParams } from \"../types/methodParams\";\r\n\r\nconst warning = (params: TMethodParams) => {\r\n  const header = getLogHeader({\r\n    variant: \"warning\",\r\n    fileName: params.fileName,\r\n    fileNameBg: params.fileNameBg,\r\n    fileNameColor: params.fileNameColor,\r\n    identifierBg: params.identifierBg,\r\n    identifierColor: params.identifierColor,\r\n  });\r\n  const footer = getLogFooter();\r\n\r\n  console.log(header, \"\\n\\n\", params.content, footer);\r\n};\r\n\r\nexport default warning;\r\n","import getLogFooter from \"../helpers/getLogFooter\";\r\nimport getLogHeader from \"../helpers/getLogHeader\";\r\nimport { TMethodParams } from \"../types/methodParams\";\r\n\r\nconst error = (params: TMethodParams) => {\r\n  const header = getLogHeader({\r\n    variant: \"error\",\r\n    fileName: params.fileName,\r\n    fileNameBg: params.fileNameBg,\r\n    fileNameColor: params.fileNameColor,\r\n    identifierBg: params.identifierBg,\r\n    identifierColor: params.identifierColor,\r\n  });\r\n  const footer = getLogFooter();\r\n\r\n  console.log(header, \"\\n\\n\", params.content, footer);\r\n};\r\n\r\nexport default error;\r\n","import getLogFooter from \"../helpers/getLogFooter\";\r\nimport getLogHeader from \"../helpers/getLogHeader\";\r\nimport { TMethodParams } from \"../types/methodParams\";\r\n\r\nconst info = (params: TMethodParams) => {\r\n  const header = getLogHeader({\r\n    variant: \"info\",\r\n    fileName: params.fileName,\r\n    fileNameBg: params.fileNameBg,\r\n    fileNameColor: params.fileNameColor,\r\n    identifierBg: params.identifierBg,\r\n    identifierColor: params.identifierColor,\r\n  });\r\n  const footer = getLogFooter();\r\n\r\n  console.log(header, \"\\n\\n\", params.content, footer);\r\n};\r\n\r\nexport default info;\r\n","import getLogFooter from \"../helpers/getLogFooter\";\r\nimport getLogHeader from \"../helpers/getLogHeader\";\r\nimport { TColors } from \"../types/colors\";\r\nimport { TVariant } from \"../types/text-variant\";\r\n\r\ntype TPayload = {\r\n  content: any;\r\n  variant: TVariant;\r\n  fileName?: string;\r\n  fileNameColor?: TColors;\r\n  fileNameBg?: TColors;\r\n  identifierBg?: TColors;\r\n  identifierColor?: TColors;\r\n};\r\n\r\nconst base = (params: TPayload) => {\r\n  const header = getLogHeader({\r\n    variant: params.variant,\r\n    fileName: params.fileName,\r\n    fileNameBg: params.fileNameBg,\r\n    identifierBg: params.identifierBg,\r\n    identifierColor: params.identifierColor,\r\n  });\r\n  const footer = getLogFooter();\r\n\r\n  console.log(header, \"\\n\\n\", params.content, footer);\r\n};\r\n\r\nexport default base;\r\n"],"mappings":"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","names":["error","info","success","warning","success","warning","error","info"]}